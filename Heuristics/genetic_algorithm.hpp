//
// Created by marcel on 11/23/22.
//

#ifndef ALGORITHM_ENGINEERING_GENETIC_ALGORITHM_HPP
#define ALGORITHM_ENGINEERING_GENETIC_ALGORITHM_HPP

#include "../solver.hpp"
#include "../mess_instance.hpp"
#include <map>
#include <vector>
#include <tuple>
#include <random>
#include <set>
/**
 * @brief Class which implements a genetic algorithm for the Minimum Equivalent Steiner Subgraph problem. Solution represation as in Ka...
 */
class GeneticAlgorithm : public Solver {

private:

    MessInstance m_instance;
    std::vector<bool> m_best_solution;
    int m_best_solution_fitness;
    // Population is a vector containg of a tuple (the chromose) and the fitness value.
    std::vector<std::tuple<std::vector<bool>,int>> m_population;
    std::vector<bool> m_node_configuration;
    std::set<Edge> m_terminal_paths;
    double m_mutation_rate = 0.1;
    int m_initial_population = 100;
    std::mt19937 m_generator;
    int m_generations = 1000;
    int m_problemsize;
    /**
     * @brief calculates the fitness of a given individual for the genetic algorithm
     * @param individual the individual for which the fitness is calculated
     * @return fitness value as integer
     */
    int calculateFitness(std::vector<bool> individual);

    /**
     * @brief applies mutation to all individuals in the population for the given mutation rate. Mutation is defined as changing if the node is in the graph or not.
     */
    void applyMutation();

    /**
     * @brief makes a crossover mutation from the population and creates a new individual
     * @return individual generated by the crossover
     */
    std::vector<bool> crossover();
    /**
     *  @brief selects two individuals for crossover to get a next generation individual
     * */
    std::vector<std::vector<bool>> individualSelection();
    /**
     * @brief generates the initial population for the genetic algorithm.
     * */
    void generate_initial_population();
public:
    GeneticAlgorithm(MessInstance instance,int seed) : m_instance(instance) {
        m_node_configuration = instance.getNodeConfiguration();
        m_generator = std::mt19937(seed);
        m_problemsize = m_instance.getGraph().getEdgeList().size();
    }

    GeneticAlgorithm(MessInstance instance, int seed, int population, double mutation_rate,int generations) : m_instance(instance) {
        m_node_configuration = instance.getNodeConfiguration();
        m_generator = std::mt19937(seed);
        m_initial_population = population;
        m_mutation_rate = mutation_rate;
        m_generations = generations;
        m_problemsize = m_instance.getGraph().getEdgeList().size();
    }

    void solve() override;

    std::vector<bool> getSolution() override{
        return m_best_solution;
    }
};


#endif //ALGORITHM_ENGINEERING_GENETIC_ALGORITHM_HPP
